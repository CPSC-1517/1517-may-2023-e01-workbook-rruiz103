@page
@model WebApp.Pages.Samples.BasicDataManagementModel
@{
    ViewData["Title"] = "Basic Data Management";
   
}

<h1>Basic Data Management</h1>
<blockquote>This page will explore the most common controls you will probably use on a form. There will be 
    multiple buttons (events) to code in the PageModel (a.k.a Code-Behind). The controls will be a mix of
    label, input, select, textarea and button.
</blockquote>

@*

Controls: label, input, select, textarea and button

<label> does not need arguments
        can have helper tags: asp-for, asp-attributes, asp-validation-for
        depending on css stylesheets, you can get different looks

<input> this is your major control to use for data input
        it can be set to various types of input data using the attribute type="xxxx"
        can tie the control to a property on the PageModel using asp-for="xxxx"
           where xxx is the name of the property on the PageModel
        the step atrribute is used in indicate the number of decimal places to allowed for
           your value. The default is 1 (integer stepping). If you want to allow decimal places
           then you need to set the step attribute to a value less than 1 (ie 0.01)

<textarea> use to accept form input for large amounts of text (ie comments)
           can tie the control to a property on the PageModel using asp-for="xxxx"
              where xxx is the name of the property on the PageModel
           can set the rows and cols attributes to control the size of the textarea

<select> use to accept form input for a list of items
    and  other names: combobox, dropdownlist, selectionlist  
<option> this control can have an optional "prompt line" which
             would be the first line in the list. 
          select requires a paired element tag set
          the option tag can have a value attribute which is the value
             that will be returned to the PageModel
          option requires a paired element tag set
          each line in the list is a separate option tag
          this control can be coded with "hard-coded" value OR
             logically load from a collection of data
          syntax of option tag is : 
             <option value="xxxx">yyyy</option>
                where xxxx is the value to be returned to the PageModel
                           this attribute can be omitted if you are not using
                            the value attribute then the return value will be
                            the text displayed in the list
                      yyyy is the text to be displayed in the list
*@
@*
    the following is a setup that allows the display of recorded errors
       saved within your PageModel when you use ModelState. The method used
       to save each error is .AddModelError(xxxx).
    it will automatically format your errors in a nice list using asp-validation-summary

    an alternative is for you to do your own coding
    in this case your will need
    a) a property in your PageModel (List<string> ErrorList)
    b) you would have to code your own loop containing an unordered list. Each <li> would 
        represent an error line
*@

<div asp-validation-summary="All" class="danger_color error_area_color">
    @if (ModelState.ErrorCount > 0)
    {
        <p>Please review the (validation summary) following concerns to correct your submission:</p>
    }

   
</div>
<div>
@if (Model.ErrorList.Count() > 0)
{
    <p>Please review the (manual display) following concerns to correct your submission:</p>
    <ul>
        @foreach (var error in Model.ErrorList)
        {
            <l1>@error</l1><br/>
        }
    </ul>
}
</div>
@* validation error messages can be place with the coresponding input field.
    to do this we with use a span tag and a helper tag of asp-validation-for
    the helper will point to the property that the input field is associated with
*@
<form method="post" class="setflex">
    <div class="onehalf">
        <label>
            Enter a number (standard text box control): 
        </label>
        <input type="number" asp-for="Num" step="0.01" class="smallbox"/>
        <span asp-validation-for="Num" class="danger_color"></span>
        
        <label>
            TextArea for large amounts of text (ie comments):
            <textarea asp-for="MassText" rows="5" cols="60" ></textarea>
            <span asp-validation-for="MassText" class="danger_color"></span>
        </label>
    </div>
    <div class="onehalf">
        <label>
            Select a favorite course from the dropdown list (select control):
        </label>
            <select asp-for="FavouriteCourse" class="mediumbox">
                <option value="0">on screen prompt line ....</option>
                <option value="1008">Digital Media Tools</option>
                <option value="1012">Programming Fundamentals</option>
                <option value="1017">Web Design Fundamentals</option>
                <option value="1517">Introduction to Web Applications</option>
            </select>
            <span asp-validation-for="FavouriteCourse" class="danger_color"></span>
       
        <label>
            Using a select without a value on the option tag:
        </label>
            <select asp-for="FavouriteCourseNoValueOnOption" class="bigbox">
                <option>on screen prompt line ....</option>
                <option>Digital Media Tools</option>
                <option>Programming Fundamentals</option>
                <option>Web Design Fundamentals</option>
                <option>Introduction to Web Applications</option>
            </select>
        
        <br/><br/>
        <button type="submit" asp-page-handler="ControlProcessing">Submit Form Data</button>
        &nbsp;&nbsp;
        @* to surpress HTML5 validation that is on the control explicitly, you can add the
            attribute formnovalidate to the button
        *@
        <button type="submit" asp-page-handler="RedirectPage" formnovalidate>Go to Basic Events</button>
    </div>
</form>
<br /><br/>
Processing Results: @Model.FeedBack